// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: count/v1/count.proto

package countv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Increment     uint32                 `protobuf:"varint,1,opt,name=increment,proto3" json:"increment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountRequest) Reset() {
	*x = CountRequest{}
	mi := &file_count_v1_count_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRequest) ProtoMessage() {}

func (x *CountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRequest.ProtoReflect.Descriptor instead.
func (*CountRequest) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{0}
}

func (x *CountRequest) GetIncrement() uint32 {
	if x != nil {
		return x.Increment
	}
	return 0
}

type CountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	mi := &file_count_v1_count_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{1}
}

func (x *CountResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_count_v1_count_proto protoreflect.FileDescriptor

const file_count_v1_count_proto_rawDesc = "" +
	"\n" +
	"\x14count/v1/count.proto\x12\bcount.v1\",\n" +
	"\fCountRequest\x12\x1c\n" +
	"\tincrement\x18\x01 \x01(\rR\tincrement\"%\n" +
	"\rCountResponse\x12\x14\n" +
	"\x05total\x18\x01 \x01(\rR\x05total2J\n" +
	"\fCountService\x12:\n" +
	"\x05Count\x12\x16.count.v1.CountRequest\x1a\x17.count.v1.CountResponse\"\x00B\x1eZ\x1cexample/gen/count/v1;countv1b\x06proto3"

var (
	file_count_v1_count_proto_rawDescOnce sync.Once
	file_count_v1_count_proto_rawDescData []byte
)

func file_count_v1_count_proto_rawDescGZIP() []byte {
	file_count_v1_count_proto_rawDescOnce.Do(func() {
		file_count_v1_count_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_count_v1_count_proto_rawDesc), len(file_count_v1_count_proto_rawDesc)))
	})
	return file_count_v1_count_proto_rawDescData
}

var file_count_v1_count_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_count_v1_count_proto_goTypes = []any{
	(*CountRequest)(nil),  // 0: count.v1.CountRequest
	(*CountResponse)(nil), // 1: count.v1.CountResponse
}
var file_count_v1_count_proto_depIdxs = []int32{
	0, // 0: count.v1.CountService.Count:input_type -> count.v1.CountRequest
	1, // 1: count.v1.CountService.Count:output_type -> count.v1.CountResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_count_v1_count_proto_init() }
func file_count_v1_count_proto_init() {
	if File_count_v1_count_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_count_v1_count_proto_rawDesc), len(file_count_v1_count_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_count_v1_count_proto_goTypes,
		DependencyIndexes: file_count_v1_count_proto_depIdxs,
		MessageInfos:      file_count_v1_count_proto_msgTypes,
	}.Build()
	File_count_v1_count_proto = out.File
	file_count_v1_count_proto_goTypes = nil
	file_count_v1_count_proto_depIdxs = nil
}
