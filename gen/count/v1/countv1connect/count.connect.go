// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: count/v1/count.proto

package countv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "example/gen/count/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CountServiceName is the fully-qualified name of the CountService service.
	CountServiceName = "count.v1.CountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CountServiceCountProcedure is the fully-qualified name of the CountService's Count RPC.
	CountServiceCountProcedure = "/count.v1.CountService/Count"
)

// CountServiceClient is a client for the count.v1.CountService service.
type CountServiceClient interface {
	Count(context.Context, *connect.Request[v1.CountRequest]) (*connect.Response[v1.CountResponse], error)
}

// NewCountServiceClient constructs a client for the count.v1.CountService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	countServiceMethods := v1.File_count_v1_count_proto.Services().ByName("CountService").Methods()
	return &countServiceClient{
		count: connect.NewClient[v1.CountRequest, v1.CountResponse](
			httpClient,
			baseURL+CountServiceCountProcedure,
			connect.WithSchema(countServiceMethods.ByName("Count")),
			connect.WithClientOptions(opts...),
		),
	}
}

// countServiceClient implements CountServiceClient.
type countServiceClient struct {
	count *connect.Client[v1.CountRequest, v1.CountResponse]
}

// Count calls count.v1.CountService.Count.
func (c *countServiceClient) Count(ctx context.Context, req *connect.Request[v1.CountRequest]) (*connect.Response[v1.CountResponse], error) {
	return c.count.CallUnary(ctx, req)
}

// CountServiceHandler is an implementation of the count.v1.CountService service.
type CountServiceHandler interface {
	Count(context.Context, *connect.Request[v1.CountRequest]) (*connect.Response[v1.CountResponse], error)
}

// NewCountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCountServiceHandler(svc CountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	countServiceMethods := v1.File_count_v1_count_proto.Services().ByName("CountService").Methods()
	countServiceCountHandler := connect.NewUnaryHandler(
		CountServiceCountProcedure,
		svc.Count,
		connect.WithSchema(countServiceMethods.ByName("Count")),
		connect.WithHandlerOptions(opts...),
	)
	return "/count.v1.CountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CountServiceCountProcedure:
			countServiceCountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCountServiceHandler struct{}

func (UnimplementedCountServiceHandler) Count(context.Context, *connect.Request[v1.CountRequest]) (*connect.Response[v1.CountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("count.v1.CountService.Count is not implemented"))
}
