package main

import (
	"context"
	"log"
	"net/http"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	countv1 "example/gen/count/v1" // generated by protoc-gen-go
	"example/gen/count/v1/countv1connect" // generated by protoc-gen-connect-go
)

var number uint32 = 1;

type CountServer struct{}

func (s *CountServer) Count(
	ctx context.Context,
	req *connect.Request[countv1.CountRequest],
) (*connect.Response[countv1.CountResponse], error) {
	log.Println("Request headers: ", req.Header())
	number++
	res := connect.NewResponse(&countv1.CountResponse{
		Total: number,
	})
	res.Header().Set("Count-Version", "v1")
	return res, nil
}

func main() {
	counter := &CountServer{}
	mux := http.NewServeMux()
	path, handler := countv1connect.NewCountServiceHandler(counter)
	mux.Handle(path, handler)
	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
